import asyncio

async def sample_recognize_pii_entities_async() -> None:
    
	from azure.ai.textanalytics import TextAnalyticsClient
	from azure.core.credentials import AzureKeyCredential
	from azure.storage.blob import BlobServiceClient, BlobClient
	key = "49645d5995c84b4287214ef65342474e"
	endpoint = "https://dlp-testing1.cognitiveservices.azure.com/"
	container_name = 'datasource'
	sink_container_name = 'datasink'
	blob_service_client = BlobServiceClient.from_connection_string("DefaultEndpointsProtocol=https;AccountName=dataprocessingtesting;AccountKey=aortquG6hivrl2UpGyqOWYasOnnpGzu63hnsNrPfMIb8dM5rY7O+HNE0lu7Tv+aMSsE8WDXbe6zE+AStybgt4Q==;EndpointSuffix=core.windows.net")
	container_client = blob_service_client.get_container_client(container_name)
	sink_container_client = blob_service_client.get_container_client(sink_container_name)
	blob_list = container_client.list_blobs()
	documents = []

    endpoint = os.environ["AZURE_LANGUAGE_ENDPOINT"]
	key = os.environ["AZURE_LANGUAGE_KEY"]

	text_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key)
	    )
	 
	def authenticate_client():
	    ta_credential = AzureKeyCredential(key)
	    text_analytics_client = TextAnalyticsClient(
	            endpoint=endpoint, 
	            credential=ta_credential)
	    return text_analytics_client
	client = authenticate_client()
	
	for blob in blob_list:
	
	    blob_client = blob_service_client.get_blob_client(container=container_name, blob=blob)
	    downloader = blob_client.download_blob(max_concurrency=1, encoding='UTF-8')
	    blob_text = downloader.readall()
	    blob_text = blob_text.replace('\r\n', '')
	    documents.append(blob_text)
	
                    async with text_analytics_client:
                        result = await text_analytics_client.recognize_pii_entities(documents)

   
		result = [doc for doc in response if not doc.is_error]
		    for doc in result:
		      sink_blob_client = blob_service_client.get_blob_client(container=sink_container_name, blob=blob.name)
		      sink_blob_client.upload_blob(doc.redacted_text)

async def main():
    await sample_recognize_pii_entities_async()

if __name__ == '__main__':
    asyncio.run(main())
